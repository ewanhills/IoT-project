<!DOCTYPE html>
<html>
<!--

Follow the readme to successfully import this code into evoThings and then link your laptop and smartphone device.

The following code has been adapted from this github repo

https://github.com/hammadtq/Evothings-Demo-Apps
This app demonstrates the use of a phone as motion sensor alarm. 
It waits for the motion once user activates it by pressing the 'start' button. 
Once motion is detected, the app send an alert SMS to the given number.
Please note that you must change number variable with your own number for this example to work.
Also, please use an active SIM card with sufficient balance to send a SMS.
-->
<head>

	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, user-scalable=no
		initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0" />

	<title>Motion Sensing SMS Alert App</title>

	<style>
		@import 'ui/css/evothings-app.css';
	</style>

	<script src="cordova.js"></script>

</head>

<body ontouchstart=""><!-- ontouchstart="" enables low-delay CSS transitions. -->

	<header>
		<button class="back" onclick="history.back()">
			<img src="ui/images/arrow-left.svg" />
		</button>

		<img class="logotype" src="ui/images/logo.svg" alt="Evothings" />

		<!--<button class="menu" onclick=""><img src="ui/images/menu.svg" /></button>-->
	</header>

	<h1>Motion Sensing SMS Alert App</h1>

	<p>
		Status: <span id="status_message">Stopped</span>
	</p>

	<button class="green wide big" onclick="app.waitForMotion()">
		Wait for movement
	</button>

	<br />
	
	<button class="charcoal wide" onclick="app.stopWaitForMotion()">
		Stop
	</button>

	<script>
	// Application object.
	var app = {
		/* Phone number through which the message will be sent upon movement.
		 * Replace with your own phone number. */
		PHONE_NUMBER : '353834110481',
		// Message sent to the recipient's phone upon device movement.
		SMS_MESSAGE : 'Motion has been detected, intruder detected',
		/* Interval at which to check for device movement, in milliseconds.
		 * Lower values means we are able to detect smaller movements, and
		 * higher values means less battery consumption.
		 */
		movement_check_interval : 3000
	}
	app.setStatusText = function (statusText)
	{
		// ID of HTML element in which to display status messages.
		document.getElementById('status_message').innerHTML = statusText
	}
	// Start watching the mobile device's movement (acceleration).
	app.waitForMotion = function()
	{
		/* Start watching the device's acceleration to determine if it has
		 * moved, unless we're already watching the device's movement. */
		if (!app.watchId)
			app.watchID = navigator.accelerometer.watchAcceleration(
				app.onAccelerationReceived,
				app.onAccelerationError,
				{ frequency: app.movement_check_interval }
			)
		app.setStatusText('Waiting for motion...')
	}
	// Stop watching the mobile device's movement.
	app.stopWaitForMotion = function()
	{
		navigator.accelerometer.clearWatch(app.watchID)
		app.watchID = null
		app.setStatusText('Stopped')
	}
	
	// Send the alert SMS.
	app.sendSMS = function()
	{
		var options = {}
		var success = function ()
		{
			app.stopWaitForMotion()
			alert('Message sent successfully') 
		}
		var error = function (e)
		{
			alert('Message failed:' + e)
		}
		sms.send(
			app.PHONE_NUMBER,
			app.SMS_MESSAGE,
			options,
			success,
			error
		)
	}
	/* onAccelerationReceived:
	 * Called when an accelerometer value has been received from the mobile
	 * device. Determines whether the device has moved since the last check. */
	app.onAccelerationReceived = function(acceleration)
	{
		// Round the accelerometer readings to avoid detecting small vibrations.
		var xMotion = Math.round(acceleration.x, 4)
		var yMotion = Math.round(acceleration.y, 4)
		/* Compare the current readings with previous ones. If they differ 
		 * we conclude that the device has moved. If no previous readings were
		 * collected, compare with 0. */
		if (xMotion != (app.previous_xMotion || 0) ||
			yMotion != (app.previous_yMotion || 0))
		{
			app.setStatusText('Motion detected')
			// Send alert SMS.
			app.sendSMS()
			/* Stop checking for device movement to avoid sending multiple SMS.
			 * TODO: re-enable the movement checking after e.g. 1 minute. */
			app.stopWaitForMotion()
			// Store the readings for use in the comparison the next time.
			app.previous_xMotion = xMotion
			app.previous_yMotion = yMotion
		}
	}
	/* onAccelerationError:
	 * Called when failing to get the device's current acceleration. This could
	 * be caused by that the Accelerometer plugin doesn't work, that the device
	 * is lacking an accelerometer or that it has been disabled by the user. */
	app.onAccelerationError = function()
	{
		// Stop the movement watch to avoid multiple alerts.
		app.stopWaitForMotion()
		alert('Failed to retrieve the device\'s movement.')
	}
	</script>

</body>

</html>
